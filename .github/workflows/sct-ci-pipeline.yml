name: '[CI/CD] SCT CI Pipeline'

env:
  REGISTRY: ghcr.io
on:
  schedule: 
    - cron: '0 0 * * *'
  workflow_dispatch:
  pull_request:
    branches:
      - main
permissions:
  contents: read
  packages: write
   
jobs:
  buid-containers-we-care-about:
    runs-on: ubuntu-latest
    name: SCT Build
    strategy:
      max-parallel: 3
      matrix:
        container: ["os-shell", "postgresql", "postgres-exporter", "redis-cluster", "redis-exporter", "minio", "minio-client", "minio-object-browser"]
    steps:
      - name: Announce Container
        run: echo "Building container ${{ matrix.container }}"
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Find Dockerfiles
        id: find-dockerfiles
        run: |
          cd "${{ github.workspace }}/bitnami/${{ matrix.container }}"
          
          # Find all Dockerfile paths recursively
          dockerfiles=$(find . -name "Dockerfile" -type f)
          
          if [ -z "$dockerfiles" ]; then
            echo "No Dockerfiles found for ${{ matrix.container }}"
            exit 1
          fi
          
          echo "Found Dockerfiles:"
          echo "$dockerfiles"
          
          # Save dockerfiles list to output for next step
          echo "dockerfiles<<EOF" >> $GITHUB_OUTPUT
          echo "$dockerfiles" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Build Containers
        run: |
          cd "${{ github.workspace }}/bitnami/${{ matrix.container }}"
          
          dockerfiles="${{ steps.find-dockerfiles.outputs.dockerfiles }}"
          
          # Build each Dockerfile found
          for dockerfile in $dockerfiles; do
            dockerfile_dir=$(dirname "$dockerfile")
            echo "Building Dockerfile: $dockerfile in directory: $dockerfile_dir"
            
            cd "${{ github.workspace }}/bitnami/${{ matrix.container }}/$dockerfile_dir"
            
            # Build the container with temporary tag
            temp_tag="temp-bitnami-${{ matrix.container }}-$(basename "$dockerfile_dir")-$(date +%s)"
            echo "Building with temporary tag: $temp_tag"
            docker build -t "$temp_tag" .
            echo "Build completed for $temp_tag"
          done
      
      - name: Tag Containers with Versions
        run: |
          cd "${{ github.workspace }}/bitnami/${{ matrix.container }}"
          
          dockerfiles="${{ steps.find-dockerfiles.outputs.dockerfiles }}"
          
          # Tag each built container with proper version
          for dockerfile in $dockerfiles; do
            dockerfile_dir=$(dirname "$dockerfile")
            temp_tag="temp-bitnami-${{ matrix.container }}-$(basename "$dockerfile_dir")-"
            
            # Find the temp tag for this dockerfile
            temp_image=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep "$temp_tag" | head -1)
            
            if [ -z "$temp_image" ]; then
              echo "Warning: Could not find temporary image for $dockerfile"
              continue
            fi
            
            echo "Processing image: $temp_image"
            
            # Extract version from the built image's labels
            version=$(docker inspect "$temp_image" --format='{{index .Config.Labels "org.opencontainers.image.version"}}')
            
            if [ -z "$version" ] || [ "$version" = "<no value>" ]; then
              echo "Warning: No version label found in $temp_image, using 'latest'"
              version="latest"
            fi
            
            # Re-tag with the proper version
            final_tag="bitnami-${{ matrix.container }}:$version"
            registry_tag="${{ env.REGISTRY }}/${{ github.repository_owner }}/bitnami-${{ matrix.container }}:$version"
            echo "Tagging $temp_image as $final_tag and $registry_tag"
            docker tag "$temp_image" "$final_tag"
            docker tag "$temp_image" "$registry_tag"
            docker rmi "$temp_image"
            
            echo "Successfully created $final_tag and $registry_tag"
          done
      
      - name: Push Containers to Registry
        run: |
          cd "${{ github.workspace }}/bitnami/${{ matrix.container }}"
          
          dockerfiles="${{ steps.find-dockerfiles.outputs.dockerfiles }}"
          
          # Push each tagged container to the registry
          for dockerfile in $dockerfiles; do
            dockerfile_dir=$(dirname "$dockerfile")
            temp_tag="temp-bitnami-${{ matrix.container }}-$(basename "$dockerfile_dir")-"
            
            # Find the registry tag for this dockerfile
            registry_image=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep "${{ env.REGISTRY }}/${{ github.repository_owner }}/bitnami-${{ matrix.container }}" | head -1)
            
            if [ -z "$registry_image" ]; then
              echo "Warning: Could not find registry image for $dockerfile"
              continue
            fi
            
            echo "Pushing $registry_image to registry"
            docker push "$registry_image"
            echo "Successfully pushed $registry_image"
          done